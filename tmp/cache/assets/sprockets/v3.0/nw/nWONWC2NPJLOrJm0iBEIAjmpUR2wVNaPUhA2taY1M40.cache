I"8(function() {
  var base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = window.Models).Sync || (base.Sync = {});

  Models.Sync = (function(superClass) {
    extend(Sync, superClass);

    function Sync() {
      return Sync.__super__.constructor.apply(this, arguments);
    }

    Sync.getGumtreeItems = function() {
      var request;
      request = $.get('/gumtree/items');
      return request.done(function(data) {
        return console.log(data);
      });
    };

    return Sync;

  })(Models.ApplicationModel);

}).call(this);
:ET